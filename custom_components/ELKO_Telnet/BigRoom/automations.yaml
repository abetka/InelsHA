- id: bigroom_point_light
  alias: BigRoom Points Light
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.bigroom_point_light
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.bigroom_point_light_tmp') == 'on' and states('sensor.bigroom_point_light') == 0) or (states('switch.bigroom_point_light_tmp') == 'off' and states('sensor.bigroom_point_light') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.bigroom_point_light') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.bigroom_point_light_tmp
  mode: single
- id: bigroom_mirror
  alias: BigRoom Mirror
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.bigroom_mirror
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.bigroom_mirror_tmp') == 'on' and states('sensor.bigroom_mirror') == 0) or (states('switch.bigroom_mirror_tmp') == 'off' and states('sensor.bigroom_mirror') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.bigroom_mirror') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.bigroom_mirror_tmp
  mode: single
- id: bigroom_backlight_door
  alias: BigRoom Backlight Door
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.bigroom_backlight_door
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.bigroom_backlight_door_tmp') == 'on' and states('sensor.bigroom_backlight_door') == 0) or (states('switch.bigroom_backlight_door_tmp') == 'off' and states('sensor.bigroom_backlight_door') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.bigroom_backlight_door') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.bigroom_backlight_door_tmp
  mode: single
- id: bigroom_backlight_window
  alias: BigRoom Backlight Window
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.bigroom_backlight_window
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.bigroom_backlight_window_tmp') == 'on' and states('sensor.bigroom_backlight_window') == 0) or (states('switch.bigroom_backlight_window_tmp') == 'off' and states('sensor.bigroom_backlight_window') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.bigroom_backlight_window') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.bigroom_backlight_window_tmp
  mode: single
- id: bigroom_chandelier
  alias: BigRoom Chandelier
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.bigroom_chandelier
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.bigroom_chandelier_tmp') == 'on' and states('sensor.bigroom_chandelier') == 0) or (states('switch.bigroom_chandelier_tmp') == 'off' and states('sensor.bigroom_chandelier') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.bigroom_chandelier') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.bigroom_chandelier_tmp
  mode: single
- id: bigroom_curtain
  alias: BigRoom Curtains
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.bigroom_curtains_open
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('cover.bigroom_curtain') == 'open' and states('sensor.bigroom_curtains_open') == 0) or (states('cover.bigroom_curtain') == 'closed' and states('sensor.bigroom_curtains_open') == 1) }}"
  - service: cover.{%+ if states('sensor.bigroom_curtains_open') == 1 %}open{% else %}close{% endif %}_cover
    data: {}
    target:
      entity_id: cover.bigroom_curtain
  mode: single
- id: bigroom_tule
  alias: BigRoom Tule
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.bigroom_tule_open
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('cover.bigroom_tule') == 'open' and states('sensor.bigroom_tule_open') == 0) or (states('cover.bigroom_tule') == 'closed' and states('sensor.bigroom_tule_open') == 1) }}"
  - service: cover.{%+ if states('sensor.bigroom_tule_open') == 1 %}open{% else %}close{% endif %}_cover
    data: {}
    target:
      entity_id: cover.bigroom_tule
  mode: single
- id: 'bigroom_switch_1_up_1'
  alias: Bigroom Switch 1 Up 1
  description: 'Bigroom Switch 1 Up 1'
  trigger:
  - platform: webhook
    webhook_id: '0x01010023'
  - platform: webhook
    webhook_id: '0x01010020'
  condition:
  - condition: template
    value_template: "{{ trigger.json.event_id == '29' and trigger.json.device_state == '1' }}"
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.kitchen_point_lights_window', 'off') }}"
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.kitchen_point_lights_window
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.kitchen_switch_1_green_1
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.kitchen_switch_2_red_2
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.kitchen_point_lights_window', 'on') }}"
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.kitchen_point_lights_window
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.kitchen_switch_1_green_1
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.kitchen_switch_2_red_2
  mode: single