# - id: 'wc_move_detector'
#   alias: WC Move Detector
#   description: 'WC Move Detector'
#   trigger:
#   - platform: webhook
#     webhook_id: '0x010100a4'
#   condition:
#   - condition: template
#     value_template: "{{ trigger.json.event_id == '29' and trigger.json.device_state == '1' }}"
#   action:
#   - choose:
#     - conditions:
#       - condition: template
#         value_template: "{{ is_state('switch.wc_pointslights', 'off') }}"
#       sequence:
#       - service: switch.turn_on
#         data: {}
#         target:
#           entity_id: switch.wc_pointslights
#       - service: switch.turn_on
#         data: {}
#         target:
#           entity_id: switch.wc_switch_1_green_1
- id: 'wc_move_detector'
  alias: WC Move Detector
  description: 'WC Move Detector'
  trigger:
  - platform: webhook
    webhook_id: '0x010100a4'
  condition:
  - condition: template
    value_template: "{{ trigger.json.event_id == '29' and trigger.json.device_state == '1' }}"
  action:
    - service: pyscript.wc_motion
      data: {}

- id: 'wc_switch_1_up_1'
  alias: WC Switch 1 Up 1
  description: 'WC Switch 1 Up 1'
  trigger:
  - platform: webhook
    webhook_id: '0x01010047'
  condition:
  - condition: template
    value_template: "{{ trigger.json.event_id == '29' and trigger.json.device_state == '1' }}"
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.wc_pointslights', 'off') }}"
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_pointslights
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_switch_1_green_1
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.wc_pointslights', 'on') }}"
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_pointslights
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_switch_1_green_1
  mode: single
- id: 'wc_switch_1_down_1'
  alias: WC Switch 1 Down 1
  description: 'WC Switch 1 Down 1'
  trigger:
  - platform: webhook
    webhook_id: '0x01010048'
  condition:
  - condition: template
    value_template: "{{ trigger.json.event_id == '29' and trigger.json.device_state == '1' }}"
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.wc_fan', 'off') }}"
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_fan
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_switch_1_red_1
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.wc_fan', 'on') }}"
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_fan
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_switch_1_red_1
  mode: single
- id: 'wc_switch_1_up_2'
  alias: WC Switch 1 Up 2
  description: 'WC Switch 1 Up 2'
  trigger:
  - platform: webhook
    webhook_id: '0x01010049'
  - platform: webhook
    webhook_id: '0x01010019'
  condition:
  - condition: template
    value_template: "{{ trigger.json.event_id == '29' and trigger.json.device_state == '1' }}"
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.wc_mirror', 'off') }}"
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_mirror
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_switch_1_green_2
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_switch_1_green_3
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.wc_mirror', 'on') }}"
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_mirror
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_switch_1_green_2
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_switch_1_green_3
  mode: single
- id: 'wc_switch_1_down_2'
  alias: WC Switch 1 Down 2
  description: 'WC Switch 1 Down 2'
  trigger:
  - platform: webhook
    webhook_id: '0x0101004a'
  - platform: webhook
    webhook_id: '0x0101001a'
  condition:
  - condition: template
    value_template: "{{ trigger.json.event_id == '29' and trigger.json.device_state == '1' }}"
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.wc_backlight', 'off') }}"
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_backlight
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_switch_1_red_2
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.wc_switch_1_red_3
    - conditions:
      - condition: template
        value_template: "{{ is_state('switch.wc_backlight', 'on') }}"
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_backlight
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_switch_1_red_2
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.wc_switch_1_red_3
  mode: single
- id: wc_mirror
  alias: WC Mirror Backlight
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.wc_mirror
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.wc_mirror_tmp') == 'on' and states('sensor.wc_mirror') == 0) or (states('switch.wc_mirror_tmp') == 'off' and states('sensor.wc_mirror') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.wc_mirror') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.wc_mirror_tmp
  mode: single
- id: wc_backlight
  alias: WC Wall Backlight
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.wc_backlight
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.wc_backlight_tmp') == 'on' and states('sensor.wc_backlight') == 0) or (states('switch.wc_backlight_tmp') == 'off' and states('sensor.wc_backlight') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.wc_backlight') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.wc_backlight_tmp
  mode: single
- id: wc_fan
  alias: WC Fan
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.wc_fan
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.wc_fan_tmp') == 'on' and states('sensor.wc_fan') == 0) or (states('switch.wc_fan_tmp') == 'off' and states('sensor.wc_fan') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.wc_fan') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.wc_fan_tmp
  mode: single
- id: wc_waterleak
  alias: WC WaterLeak
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.wc_waterleak
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.wc_waterleak_tmp') == 'on' and states('sensor.wc_waterleak') == 0) or (states('switch.wc_waterleak_tmp') == 'off' and states('sensor.wc_waterleak') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.wc_waterleak') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.wc_waterleak_tmp
  mode: single
- id: wc_pointslights
  alias: WC Points Light
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
    - sensor.wc_pointslights
  condition: []
  action:
  - condition: template
    value_template: "{{ (states('switch.wc_pointslights_tmp') == 'on' and states('sensor.wc_pointslights') == 0) or (states('switch.wc_pointslights_tmp') == 'off' and states('sensor.wc_pointslights') == 1) }}"
  - service: switch.turn_{%+ if states('sensor.wc_pointslights') == 1 %}on{% else %}off{% endif %}
    data: {}
    target:
      entity_id: switch.wc_pointslights_tmp
  mode: single